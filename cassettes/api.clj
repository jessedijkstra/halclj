{:calls [{:var-name "clj-http.core/request", :arg-key {:request-method :get, :query-string nil, :server-port nil, :server-name "static.blendle.nl", :uri "/api.json"}, :return {:status 200, :headers {"X-Cache" "HIT", "Access-Control-Max-Age" "3000", "Server" "AmazonS3", "Age" "1922", "Via" "1.1 varnish", "x-amz-version-id" "OA7MxDeAjvuRnJKgYEcmm2dxlXG4CPBb", "Content-Type" "application/json", "Access-Control-Allow-Origin" "*", "Timing-Allow-Origin" "*", "Content-Length" "60330", "Connection" "close", "Accept-Ranges" "bytes", "x-amz-meta-s3cmd-attrs" "uid:1000/gname:erik/uname:erik/gid:1000/mode:33204/mtime:1414677056/atime:1414677056/ctime:1414677056", "X-Cache-Hits" "3", "Access-Control-Allow-Methods" "GET", "x-amz-request-id" "B714EC91858D2B3C", "Date" "Fri, 07 Nov 2014 20:39:15 GMT", "Vary" "Origin,Access-Control-Request-Headers,Access-Control-Request-Method", "Access-Control-Allow-Credentials" "true", "x-amz-id-2" "okhm7Ye1fZJChgwHeWGyaCnLySJjw2KTmu5XLbrZJsWpm7J3Xz+XQ8kH17r+VtIwKSSZyNbNmW8=", "X-Served-By" "cache-fra1222-FRA"}, :body #vcr-clj/input-stream ""}}]}
